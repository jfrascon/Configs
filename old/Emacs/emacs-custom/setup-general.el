;;; package --- Summary;;; Commentary:;;; https://github.com/tuhdo/emacs-c-ide-demo/blob/master/custom/setup-general.el;;; Code:(menu-bar-mode +1)(tool-bar-mode +1)(scroll-bar-mode +1)(setq gc-cons-threshold 100000000)(setq inhibit-startup-message t)(defalias 'yes-or-no-p 'y-or-n-p);; show unncessary whitespace that can mess up your diff(add-hook 'prog-mode-hook          (lambda ()            (interactive) (setq show-trailing-whitespace 1)));; use space to indent by default(setq-default indent-tabs-mode nil);; set appearance of a tab that is represented by 4 spaces(setq-default tab-width 4);; Compilation(global-set-key (kbd "<f5>")                (lambda ()                  (interactive)                  (setq-local compilation-read-command nil)                  (call-interactively 'compile)));; setup GDB(setq gdb-many-windows t ;; use gdb-many-windows by default      gdb-show-main t)   ;; Non-nil means display source file containing the main routine atstartup                                        ; automatically indent when press RET;; activate whitespace-mode to view all whitespace characters(global-set-key (kbd "C-c C-w") 'whitespace-mode)(windmove-default-keybindings)                                        ; How to enter special symbols with Alt(setq ns-alternate-modifier 'meta)(setq ns-right-alternate-modifier 'none)(setq custom-file "~/.emacs.d/custom.el")(load custom-file)(add-to-list 'exec-path "/usr/local/bin")                                        ; I don't want the error bell.(setq ring-bell-function 'ignore)                                        ;Make the yes or no prompts shorter.(defalias 'yes-or-no-p 'y-or-n-p)                                        ; A common frustration with new Emacs users is the filename# files created.                                        ;This centralises the backup files created as you edit.(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))      auto-saves-dir "~/.emacs.d/backups"      backup-by-copying t    ; Don't delink hardlinks      version-control t      ; Use version numbers on backups      delete-old-versions t  ; Automatically delete excess backups      kept-new-versions 20   ; how many of the newest versions to keep      kept-old-versions 5    ; and how many of the old      )                                        ; Display line numbers always(global-nlinum-mode t);; Highlight current line(global-hl-line-mode +1);; TAB completion?(setq tab-always-indent 'complete)(add-to-list 'completion-styles 'initials t);;(use-package alect-themes;;  :ensure t)(use-package dracula-theme  :ensure t)(use-package zenburn-theme  :ensure t);; Theme folder;;(add-to-list 'load-path "~/.emacs.d/themes")(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")(load-theme 'zenburn t) ;; dracula;I do not prefer wrapped lines.(global-visual-line-mode -1)(add-to-list 'auto-mode-alist '("\\.pgc" . c-mode));; How to get back to an active minibuffer prompt in emacs without the mouse;; https://trey-jackson.blogspot.com.es/2010/04/emacs-tip-36-abort-minibuffer-when.html(defun switch-to-minibuffer-window ()  "Switch to minibuffer window (if active)."  (interactive)  (when (active-minibuffer-window)    (select-frame-set-input-focus (window-frame (active-minibuffer-window)))    (select-window (active-minibuffer-window))))(global-set-key (kbd "<f7>") 'switch-to-minibuffer-window)                                        ; I never want whitespace at the end of lines. Remove it on save.(add-hook 'before-save-hook 'delete-trailing-whitespace);; turn on highlight matching brackets when cursor is on one(show-paren-mode t)(setq show-paren-style 'parenthesis) ;; highlight brackets                                        ;(setq show-paren-style 'expression) ;; highlight entire expression                                        ;(setq show-paren-style 'mixed)      ;; highlight brackets if visible, else entire expression(add-hook 'eshell-mode-hook (lambda () (setq pcomplete-cycle-completions nil)))(setq inhibit-startup-message t)(setq column-number-mode t)(defun show-file-name ()  "Show the full path file name in the minibuffer."  (interactive)  (message (buffer-file-name)))(global-set-key (kbd "C-<f1>") 'show-file-name) ; Or any other key you want;; Scroll one line at a time (less "jumpy" than defaults)(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)) ;; one line at a time      mouse-wheel-progressive-speed nil ;; don't accelerate scrolling      mouse-wheel-follow-mouse t ;; scroll window under mouse      scroll-step 1 ;; keyboard scroll one line at a time      help-window-select t)(set-face-attribute 'linum nil :height 150);; In MacOS I have the cmd function mapped to the caplocks.;; I want to use the cmd function as the control function in Emacs in MacOS(if (eq system-type 'darwin)    (setq mac-command-modifier 'control));; Split a window and jump into it!!(global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))(global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))(provide 'setup-general);;; setup-general ends here